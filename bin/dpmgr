#!/usr/bin/env python
# coding=utf-8

# dptrp1manager, high level tools to interact with the Sony DPT-RP1
# Copyright Â© 2018 Christian Gross

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import sys
from pprint import pprint

from dptrp1manager import dptman
from dptrp1manager import dptconfig
from dptrp1manager import dptuploader
from dptrp1manager import dptdownloader
from dptrp1manager import dptsync


class DPTRP1(object):
    def __init__(self):
        # to be filled when connecting
        self._dp_mgr = None
        self._dp_config = None
        self._dp_downloader = None
        self._dp_uploader = None
        self._dp_synchronizer = None

        # command line parser
        parser = argparse.ArgumentParser(
            description="Command line manager for the Sony DPT-RP1",
            usage="""dpmgr <command> [<args>]

The dpmgr commands are:
   upload               Upload files or directory contents to the digital paper device
   download             Download files or directory contents from the digital paper device
   tree                 List documents and directories on the digital paper device in a tree
   delete               Delete documents and directories on the digital paper device
   mkdir                Create a new directory on the digital paper device
   sync                 Synchronize files or directory contents with the digital paper device
   syncpairs            Synchronize pairs defined in the config file ~/.dpmgr/sync.conf
   status               Check the device status
   config               Manage the configuration of the device
   add-wifi             Add a wifi network
   delete-wifi          Delete a wifi network
   scan-wifi            Scan for the available wifi networks
   list-wifi            List all known wifi networks
   list-templates       List all templates
   rename-template      Rename a template
   upload-template      Upload a new template
   delete-template      Delete a template

Configuration files, id and key files are stored in ~/.dpmgr.
""",
        )
        parser.add_argument("command", help="Subcommand to run")
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        command = args.command.replace("-", "_")
        if not hasattr(self, command):
            print("Unknown command")
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        method = getattr(self, command)
        method()

    def _connect2device(self):
        if self._dp_mgr is None:
            self._dp_mgr = dptman.DPManager()
        if self._dp_config is None:
            self._dp_config = dptconfig.DPConfig(self._dp_mgr)
        if self._dp_downloader is None:
            self._dp_downloader = dptdownloader.Downloader(self._dp_mgr)
        if self._dp_uploader is None:
            self._dp_uploader = dptuploader.Uploader(self._dp_mgr)
        if self._dp_synchronizer is None:
            self._dp_synchronizer = dptsync.Synchronizer(self._dp_mgr)

    def upload(self):
        parser = argparse.ArgumentParser(
            description="Upload files (.pdf) or directory contents to the \
            digital paper device.\
            By default, skip files on conflict, i.e. when a file \
            is present locally and on the remote device."
        )
        parser.add_argument("local", help="Path to the local file or directory")
        parser.add_argument("remote", help="Path to the remote file or directory")
        group1 = parser.add_mutually_exclusive_group()
        group1.add_argument(
            "-d", "--dir", action="store_true", help="Upload a whole directory."
        )
        group1.add_argument(
            "-a",
            "--all",
            action="store_true",
            help="Upload all, that is, the whole subdirectory structure.",
        )
        group2 = parser.add_mutually_exclusive_group()
        group2.add_argument(
            "-r",
            "--remote_wins",
            action="store_true",
            help="Prefer the remote file in case of a conflict.",
        )
        group2.add_argument(
            "-l",
            "--local_wins",
            action="store_true",
            help="Prefer the local file in case of a conflict.",
        )
        group2.add_argument(
            "-n",
            "--newer",
            action="store_true",
            help="Prefer the newer file in case of a conflict.",
        )
        # decide what to do
        args = parser.parse_args(sys.argv[2:])
        policy = "skip"
        if args.remote_wins:
            policy = "remote_wins"
        elif args.local_wins:
            policy = "local_wins"
        elif args.newer:
            policy = "newer"
        self._connect2device()
        if args.all:
            self._dp_uploader.upload_recursively(args.local, args.remote, policy)
        elif args.dir:
            self._dp_uploader.upload_folder_contents(args.local, args.remote, policy)
        else:
            self._dp_uploader.upload_file(args.local, args.remote, policy)

    def download(self):
        parser = argparse.ArgumentParser(
            description="Download files or directory contents from the \
            digital paper device.\
            By default, skip files on conflict, i.e. when a file \
            is present locally and on the remote device."
        )
        parser.add_argument("remote", help="Path to the remote file or directory")
        parser.add_argument("local", help="Path to the local file or directory")
        group1 = parser.add_mutually_exclusive_group()
        group1.add_argument(
            "-d", "--dir", action="store_true", help="Download a whole directory."
        )
        group1.add_argument(
            "-a",
            "--all",
            action="store_true",
            help="Download all, that is, the whole subdirectory structure.",
        )
        group2 = parser.add_mutually_exclusive_group()
        group2.add_argument(
            "-r",
            "--remote_wins",
            action="store_true",
            help="Prefer the remote file in case of a conflict.",
        )
        group2.add_argument(
            "-l",
            "--local_wins",
            action="store_true",
            help="Prefer the local file in case of a conflict.",
        )
        group2.add_argument(
            "-n",
            "--newer",
            action="store_true",
            help="Prefer the newer file in case of a conflict.",
        )
        # decide what to do
        args = parser.parse_args(sys.argv[2:])
        policy = "skip"
        if args.remote_wins:
            policy = "remote_wins"
        elif args.local_wins:
            policy = "local_wins"
        elif args.newer:
            policy = "newer"
        self._connect2device()
        if args.all:
            self._dp_downloader.download_recursively(args.remote, args.local, policy)
        elif args.dir:
            self._dp_downloader.download_folder_contents(
                args.remote, args.local, policy
            )
        else:
            self._dp_downloader.download_file(args.remote, args.local, policy)

    def tree(self):
        parser = argparse.ArgumentParser(
            description="List documents and directories on the digital paper device \
                    in a tree structure."
        )
        parser.add_argument("remote_path", help="Path to the root remote directory.")
        parser.add_argument(
            "-a",
            "--all",
            action="store_true",
            help="List all, that is, include also files.",
        )
        args = parser.parse_args(sys.argv[2:])
        self._connect2device()
        if args.all:
            self._dp_mgr.print_folder_contents(args.remote_path)
        else:
            self._dp_mgr.print_dir_tree(args.remote_path)

    def delete(self):
        parser = argparse.ArgumentParser(
            description="Delete documents and directories on the digital paper device"
        )
        parser.add_argument(
            "remote_path", help="Path to the root remote file or directory."
        )
        group1 = parser.add_mutually_exclusive_group()
        group1.add_argument(
            "-a",
            "--all",
            action="store_true",
            help="Remove all files and subdirectories in the directory.",
        )
        group1.add_argument(
            "-d",
            "--dir",
            action="store_true",
            help="Remove all files in the directory, but do not recurse into subdirectories.",
        )
        # decide what to do
        args = parser.parse_args(sys.argv[2:])
        self._connect2device()
        if args.all:
            self._dp_mgr.rm_allfiles_recursively(args.remote_path)
        elif args.dir:
            self._dp_mgr.rm_allfiles(args.remote_path)
        else:
            self._dp_mgr.rm(args.remote_path)

    def mkdir(self):
        parser = argparse.ArgumentParser(
            description="Create a new directory on the digital paper device"
        )
        parser.add_argument("remote_path", help="Path of the new remote directory.")
        args = parser.parse_args(sys.argv[2:])
        self._connect2device()
        self._dp_mgr.mkdir(args.remote_path)

    def sync(self):
        parser = argparse.ArgumentParser(
            description="Synchronize directory contents between the \
            digital paper device and a local directory.\
            By default, skip files on conflict, i.e. when a file \
            is present locally and on the remote device."
        )
        parser.add_argument("local", help="Path to the local directory")
        parser.add_argument("remote", help="Path to the remote directory")
        group2 = parser.add_mutually_exclusive_group()
        group2.add_argument(
            "-r",
            "--remote_wins",
            action="store_true",
            help="Prefer the remote file in case of a conflict.",
        )
        group2.add_argument(
            "-l",
            "--local_wins",
            action="store_true",
            help="Prefer the local file in case of a conflict.",
        )
        group2.add_argument(
            "-n",
            "--newer",
            action="store_true",
            help="Prefer the newer file in case of a conflict.",
        )
        # decide what to do
        args = parser.parse_args(sys.argv[2:])
        policy = "skip"
        if args.remote_wins:
            policy = "remote_wins"
        elif args.local_wins:
            policy = "local_wins"
        elif args.newer:
            policy = "newer"
        self._connect2device()
        self._dp_synchronizer.sync_folder(args.local, args.remote, policy)

    def syncpairs(self):
        parser = argparse.ArgumentParser(
            description="Synchronize pairs defined in the config \
            file ~/.dpmgr/sync.conf."
        )
        self._connect2device()
        self._dp_synchronizer.sync_pairs()

    def config(self):
        parameterlist = ("timeout", "owner", "time_format", "date_format", "timezone")
        parser = argparse.ArgumentParser(
            description="Manage the configuration of the device."
        )
        parser.add_argument("-p", "--parameter", help="The parameter to set.")
        parser.add_argument("-v", "--value", help="The value to set.")
        args = parser.parse_args(sys.argv[2:])
        if args.parameter and args.value:
            if args.parameter not in parameterlist:
                print("Parameter {} unknown.".format(args.parameter))
                sys.exit(1)
            else:
                self._connect2device()
                setattr(self._dp_config, args.parameter, args.value)
        elif args.parameter and (not args.value):
            if args.parameter not in parameterlist:
                print("Parameter {} unknown.".format(args.parameter))
                sys.exit(1)
            else:
                self._connect2device()
                val = getattr(self._dp_config, args.parameter)
                print("{}: {}".format(args.parameter, val))
        elif (not args.parameter) and (not args.value):
            print("---Current configuration---")
            for par in parameterlist:
                self._connect2device()
                val = getattr(self._dp_config, par)
                print("{}: {}".format(par, val))
        else:
            print("Using -v alone makes no sense.")

    def add_wifi(self):
        parser = argparse.ArgumentParser(description="Add a wifi network.")
        parser.add_argument("ssid", help="SSID (name) of the wifi network.")
        parser.add_argument("-s", "--security", help="The network security (psk).")
        parser.add_argument("-p", "--password", help="The password.")
        parser.add_argument(
            "--static", action="store_true", help="Configure a static address."
        )
        parser.add_argument("--ip-address", help="The static ip address.")
        parser.add_argument("--gateway", help="The gateway for a static configuration.")
        parser.add_argument(
            "--network-mask", help="The network mask for a static configuration."
        )
        parser.add_argument(
            "--dns1",
            default="",
            help="The address of the first dns server for a static configuration.",
        )
        parser.add_argument(
            "--dns2",
            default="",
            help="The address of the second dns server for a static configuration.",
        )
        parser.add_argument("--proxy", action="store_true", help="Behind a proxy")
        args = parser.parse_args(sys.argv[2:])
        if not args.security:
            self._connect2device()
            self._dp_config.add_wifi(args.ssid)
        elif args.security == "psk":
            if not args.passwd:
                print("Password must be specified with -p.")
                sys.exit(1)
            else:
                if not args.static:
                    self._connect2device()
                    self._dp_config.add_wifi(args.ssid, args.security, args.passwd)
                else:
                    self._connect2device()
                    self._dp_config.add_wifi(
                        args.ssid,
                        args.security,
                        args.passwd,
                        False,
                        args.ip_address,
                        args.gateway,
                        args.network_mask,
                        args.dns1,
                        args.dns2,
                        args.proxy,
                    )
        else:
            print('Network security must be "psk" for a secured network.')
            sys.exit(1)

    def delete_wifi(self):
        parser = argparse.ArgumentParser(description="Delete a wifi network.")
        parser.add_argument("ssid", help="SSID (name) of the wifi network.")
        parser.add_argument("-s", "--security", help="The network security (psk).")
        args = parser.parse_args(sys.argv[2:])
        if args.security:
            self._connect2device()
            self._dp_config.delete_wifi(args.ssid, args.security)
        else:
            self._connect2device()
            self._dp_config.delete_wifi(args.ssid)

    def scan_wifi(self):
        parser = argparse.ArgumentParser(
            description="Scan the available wifi networks."
        )
        print("---Discovered wifi networks---")
        self._connect2device()
        pprint(self._dp_config.scan_wifi())

    def list_wifi(self):
        parser = argparse.ArgumentParser(description="List all known wifi networks.")
        print("---Known wifi networks---")
        self._connect2device()
        pprint(self._dp_config.list_wifi())

    def status(self):
        parameterlist = (
            "storage_free",
            "storage_total",
            "battery_level",
            "battery_pen",
            "battery_health",
            "battery_status",
            "plugged",
            "model",
            "serial",
            "firmware_version",
            "mac_address",
        )
        parser = argparse.ArgumentParser(
            description="Get the device status. \
                    Invoke without arguments to get a summary of \
                    the status with all known parameters."
        )
        parser.add_argument(
            "-p", "--parameter", help="Get the value of a specific status parameter."
        )
        args = parser.parse_args(sys.argv[2:])
        if args.parameter:
            if args.parameter not in parameterlist:
                print("Parameter {} unknown.".format(args.parameter))
                sys.exit(1)
            else:
                self._connect2device()
                val = getattr(self._dp_config, args.parameter)
                if args.parameter.startswith("storage"):
                    print("{}: {}".format(args.parameter, self._sizeof_fmt(val)))
                else:
                    print("{}: {}".format(args.parameter, val))
        else:
            self._connect2device()
            print(" ")
            print("---Current status---")
            for par in parameterlist:
                val = getattr(self._dp_config, par)
                if par.startswith("storage"):
                    print("{}: {}".format(par, self._sizeof_fmt(val)))
                else:
                    print("{}: {}".format(par, val))

    def list_templates(self):
        parser = argparse.ArgumentParser(description="List all templates.")
        print("---Templates---")
        self._connect2device()
        pprint(self._dp_config.templates)

    def rename_template(self):
        parser = argparse.ArgumentParser(description="Rename a templates.")
        parser.add_argument("oldname", help="The old name of the template.")
        parser.add_argument("newname", help="The new name of the template.")
        args = parser.parse_args(sys.argv[2:])
        self._connect2device()
        self._dp_config.rename_template(args.oldname, args.newname)

    def add_template(self):
        parser = argparse.ArgumentParser(description="Add a templates.")
        parser.add_argument("name", help="The name of the template.")
        parser.add_argument("path", help="The local path to the pdf of the template.")
        args = parser.parse_args(sys.argv[2:])
        self._connect2device()
        self._dp_config.add_template(args.name, args.path)

    def delete_template(self):
        parser = argparse.ArgumentParser(description="Delete a templates.")
        parser.add_argument("name", help="The name of the template.")
        args = parser.parse_args(sys.argv[2:])
        self._connect2device()
        self._dp_config.delete_template(args.name)

    def _sizeof_fmt(self, num, suffix="B"):
        for unit in ["", "k", "M", "G", "T", "P", "E", "Z"]:
            if abs(num) < 1024.0:
                return "{:3.1f}{}{}".format(num, unit, suffix)
            num /= 1024.0
        return "{:.1f}{}{}".format(num, "Y", suffix)


if __name__ == "__main__":
    DPTRP1()
