#compdef _dpmgr dpmgr

CONTENTS_FILE="$HOME/.dpmgr/contents"
CONTENTS="test/test/t kkk/dss/ddd"

function _dpmgr {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    "-h[Show help information]" \
    "--help[Show help information]" \
    "1: :(upload download tree delete mkdir sync syncpairs status config add-wifi delete-wifi scan-wifi list-wifi list-templates rename-template upload-template delete-template)" \
    "*::arg:->args"

  case $line[1] in
    upload)
      _dpmgr_upload
      ;;
    download)
      _dpmgr_download
      ;;
    tree)
      _dpmgr_tree
      ;;
    delete)
      _dpmgr_delete
      ;;
    mkdir)
      _dpmgr_mkdir
      ;;
    sync)
      _dpmgr_sync
      ;;
    syncpairs)
      _dpmgr_syncpairs
      ;;
    status)
      _dpmgr_status
      ;;
    config)
      _dpmgr_config
      ;;
    add-wifi)
      _dpmgr_add_wifi
      ;;
    delete-wifi)
      _dpmgr_delete_wifi
      ;;
    scan-wifi)
      _dpmgr_scan_wifi
      ;;
    list-wifi)
      _dpmgr_list_wifi
      ;;
    list-templates)
      _dpmgr_list_templates
      ;;
    rename-template)
      _dpmgr_rename_template
      ;;
    upload-template)
      _dpmgr_upload_template
      ;;
    delete-template)
      _dpmgr_delete_template
      ;;
  esac
}

function _dpmgr_upload {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    "-h[Show help information]" \
    "-d[Upload a whole directory]" \
    "-a[Upload all, the whole subdirectory structure]" \
    "-r[Prefer the remote file in case of a conflict]" \
    "-l[Prefer the local file in case of a conflict]" \
    "-n[Prefer the newer file in case of a conflict]" \
    "1:local:_files" \
    "2:remote:->remote_files"

  case $state in
    remote_files)
      local contents
      contents=( "${(f)mapfile[$CONTENTS_FILE]}" )
      _multi_parts / contents
      ;;
  esac
}


function _dpmgr_download {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    "-h[Show help information]" \
    "-d[Upload a whole directory]" \
    "-a[Upload all, the whole subdirectory structure]" \
    "-r[Prefer the remote file in case of a conflict]" \
    "-l[Prefer the local file in case of a conflict]" \
    "-n[Prefer the newer file in case of a conflict]" \
    "1:remote:->remote_files" \
    "2:local:_files"

  case $state in
    remote_files)
      local contents
      contents=( "${(f)mapfile[$CONTENTS_FILE]}" )
      _multi_parts / contents
      ;;
  esac
}

function _dpmgr_tree {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    "-h[Show help information]" \
    "-a[List all, including files]" \
    ":remote:->remote_files"

  case $state in
    remote_files)
      local contents
      contents=( "${(f)mapfile[$CONTENTS_FILE]}" )
      _multi_parts / contents
      ;;
  esac
}

function _dpmgr_delete {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    "-h[Show help information]" \
    "-a[Delete all files and subdirectories]" \
    "-d[Delete all files, don't touch subdirectories]" \
    ":remote:->remote_files"

  case $state in
    remote_files)
      local contents
      contents=( "${(f)mapfile[$CONTENTS_FILE]}" )
      _multi_parts / contents
      ;;
  esac
}

function _dpmgr_mkdir {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    "-h[Show help information]" \
    ":remote:->remote_files"

  case $state in
    remote_files)
      local contents
      contents=( "${(f)mapfile[$CONTENTS_FILE]}" )
      _multi_parts / contents
      ;;
  esac
}

function _dpmgr_sync {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    "-h[Show help information]" \
    "-r[Prefer the remote file in case of a conflict]" \
    "-l[Prefer the local file in case of a conflict]" \
    "-n[Prefer the newer file in case of a conflict]" \
    "1:local:->_files" \
    "2:remote:->remote_files"

  case $state in
    remote_files)
      local contents
      contents=( "${(f)mapfile[$CONTENTS_FILE]}" )
      _multi_parts / contents
      ;;
  esac
}

function _dpmgr_syncpairs {
}

function _dpmgr_status {
  _arguments -C \
    "-h[Show help information]" \
    "-p[PARAMETER Get the value of a specific status parameter]"
}

function _dpmgr_config {
}

function _dpmgr_add_wifi {
}

function _dpmgr_delete_wifi {
}

function _dpmgr_scan_wifi {
}

function _dpmgr_list_wifi {
}

function _dpmgr_list_templates {
}

function _dpmgr_rename_template {
}

function _dpmgr_upload_template {
}

function _dpmgr_delete_template {
}

