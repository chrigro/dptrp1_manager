#!/bin/bash
#

DPMGR_SUBCOMMANDS="upload download tree delete mkdir sync syncpairs status config add-wifi delete-wifi scan-wifi list-wifi list-templates rename-template upload-template delete-template"


CONTENTS_FILE="$HOME/.dpmgr/contents"


# from https://github.com/EvanPurkhiser/dots
# Do completion from a passed list of paths
#
# Accepts 2 arguments
# 1. The list of paths to complete from
# 2. The current word being completed
__custom_path_comp()
{
    # This forces readline to only display the last item separated by a slash
    compopt -o filenames

    local IFS=$'\n'
    local k="${#COMPREPLY[@]}"

    for path in $(compgen -W "$1" -- $2)
    do
        local trailing_trim

        # Determine what to trim from the end
        trailing_trim="${path#${2%/*}/}/"
        trailing_trim="${trailing_trim#*/}"
        trailing_trim="${trailing_trim%/}"

        # Don't add a space if there is more to complete
        [[ "$trailing_trim" != "" ]] && compopt -o nospace

        # Remove the slash if mark-directories is off
        if ! _rl_enabled mark-directories
        then
            # If The current typed path doesnt have a slash in it yet check if
            # it is the full first portion of a path and ignore everything after
            # if it is. We don't have to do this once the typed path has a slash
            # in it as the logic above will pick up on it
            [[ "$2" != */* && "$path" == ${2}/* ]] && path="$2/$trailing_trim"

            trailing_trim="/$trailing_trim"
        fi

        COMPREPLY[k++]="${path%%${trailing_trim}}"
    done
}



# complete dpmgr
_dpmgr()
{
  local cur=${COMP_WORDS[COMP_CWORD]}  # The current argument the user is writing
  local prev=${COMP_WORDS[COMP_CWORD-1]} # The previous argument
  local prevprev=${COMP_WORDS[COMP_CWORD-2]} # The previous argument
  local first=${COMP_WORDS[1]} # The first argument

  COMPREPLY=()

  # complete the first argument
  if [ $COMP_CWORD -eq 1 ]; then
    # maybe completing an option
    if [[ "$cur" == -* ]]; then
      COMPREPLY=( $( compgen -W "-h --help" -- $cur ) )
    else
      COMPREPLY=( $( compgen -W "${DPMGR_SUBCOMMANDS}" -- $cur ) )
    fi
    return 0
  fi

  # complete the second (or third if there is an option) argument 
  if [ $COMP_CWORD -eq 2 ] || ( [ $COMP_CWORD -eq 3 ] && [[ "$prev" == -* ]] ); then
    case "$first" in
      upload)
        if [[ "$cur" == -* ]]; then
          COMPREPLY=( $( compgen -W "-h -d -a -r -l -n" -- $cur ) )
        else
          COMPREPLY=( $( compgen -o default -- $cur ) )
        fi
        return 0
        ;;
      download)
        if [[ "$cur" == -* ]]; then
          COMPREPLY=( $( compgen -W "-h -d -a -r -l -n" -- $cur ) )
        else
          __custom_path_comp "$(cat "$CONTENTS_FILE")" "$cur"
        fi
        return 0
        ;;
    esac
  fi


  # complete the third (or forth if there is an option) argument
  if [ $COMP_CWORD -eq 3 ] || ( [ $COMP_CWORD -eq 4 ] && [[ "$prevprev" == -* ]] ); then
    case "$first" in
      upload)
        __custom_path_comp "$(cat "$CONTENTS_FILE")" "$cur"
        return 0
        ;;
      download)
        COMPREPLY=( $( compgen -o default -- $cur ) )
        return 0
        ;;
    esac
  fi


}
complete -F _dpmgr dpmgr


